# Integration Tests Environment Configuration
# Copy this file to .env.integration and fill in your test values

# =============================================================================
# DATABASE CONFIGURATION (Required)
# =============================================================================

# Test Database URL - Use a separate test database for safety
# Format: postgresql://username:password@host:port/database
TEST_DATABASE_URL=postgresql://postgres:password@localhost:5432/test_db

# Supabase Configuration for Real API Tests
TEST_SUPABASE_URL=https://your-test-project.supabase.co
TEST_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
TEST_SUPABASE_SERVICE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

# =============================================================================
# AUTHENTICATION CONFIGURATION (Required)
# =============================================================================

# Better Auth Configuration
TEST_BETTER_AUTH_URL=http://localhost:3001
TEST_BETTER_AUTH_SECRET=your-32-character-secret-key-here-123456789
TEST_APP_URL=http://localhost:3001

# =============================================================================
# OAUTH CONFIGURATION (Required for OAuth tests)
# =============================================================================

# Google OAuth - Create a separate OAuth app for testing
TEST_GOOGLE_CLIENT_ID=123456789-abcdef.apps.googleusercontent.com
TEST_GOOGLE_CLIENT_SECRET=GOCSPX-your-google-client-secret

# GitHub OAuth (Optional)
TEST_GITHUB_CLIENT_ID=your-github-test-client-id
TEST_GITHUB_CLIENT_SECRET=your-github-test-client-secret

# =============================================================================
# TEST USER ACCOUNTS (Optional but recommended)
# =============================================================================

# Pre-created test accounts for consistent testing
TEST_USER_EMAIL=test-user@yourdomain.com
TEST_USER_PASSWORD=TestPassword123!

TEST_ADMIN_EMAIL=admin-test@yourdomain.com
TEST_ADMIN_PASSWORD=AdminPassword123!

# =============================================================================
# TEST CONFIGURATION (Optional)
# =============================================================================

# Test behavior configuration
TEST_CLEANUP=true                    # Auto-cleanup test data after tests
TEST_VERBOSE=false                   # Enable verbose test output
SKIP_SLOW_TESTS=false               # Skip slow network-dependent tests

# Test timeouts and limits
TEST_TIMEOUT=30000                   # Default test timeout in milliseconds
TEST_RETRY_COUNT=2                   # Number of retries for failed tests
TEST_CONCURRENT_LIMIT=5              # Max concurrent requests during tests

# =============================================================================
# FALLBACK CONFIGURATION
# =============================================================================
# If TEST_* variables are not set, tests will fall back to these production variables.
# This allows running integration tests against your main development environment.

DATABASE_URL=postgresql://postgres:password@localhost:5432/postgres
NEXT_PUBLIC_SUPABASE_URL=https://your-project.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-production-anon-key

BETTER_AUTH_URL=http://localhost:3000
BETTER_AUTH_SECRET=your-production-secret
NEXT_PUBLIC_APP_URL=http://localhost:3000

GOOGLE_CLIENT_ID=your-production-google-client-id
GOOGLE_CLIENT_SECRET=your-production-google-client-secret

# =============================================================================
# DEVELOPMENT NOTES
# =============================================================================

# 1. SAFETY: Always use separate test databases and OAuth apps to avoid affecting production data
# 2. CREDENTIALS: Rotate test credentials regularly and don't commit them to version control
# 3. CLEANUP: Verify TEST_CLEANUP=true to automatically remove test data
# 4. NETWORKING: Ensure test services are reachable from your test environment
# 5. RATE LIMITS: Be mindful of API rate limits when running tests frequently

# Example test database setup:
# 1. Create a new Supabase project for testing
# 2. Run your database migrations on the test database
# 3. Use the test project's connection string and API keys
# 4. Configure separate OAuth apps pointing to your test URLs

# Example Google OAuth app setup for testing:
# 1. Go to Google Cloud Console
# 2. Create a new project or use existing test project
# 3. Enable Google+ API
# 4. Create OAuth 2.0 credentials
# 5. Add authorized redirect URIs:
#    - http://localhost:3001/api/auth/callback/google
#    - Your test domain callback URLs
# 6. Use the generated client ID and secret in TEST_GOOGLE_CLIENT_ID/SECRET