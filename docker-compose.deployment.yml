version: '3.8'

services:
  # Main TEL Cognitive Platform App
  simstudio:
    build:
      context: .
      dockerfile: docker/app.Dockerfile
    container_name: tel-simstudio
    restart: unless-stopped
    ports:
      - '3000:3000'
    deploy:
      resources:
        limits:
          memory: 8G
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-simstudio}
      - BETTER_AUTH_URL=${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
      - NEXT_PUBLIC_APP_URL=${NEXT_PUBLIC_APP_URL:-http://localhost:3000}
      - BETTER_AUTH_SECRET=${BETTER_AUTH_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - FREESTYLE_API_KEY=${FREESTYLE_API_KEY:-}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID:-}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET:-}
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID:-}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET:-}
      - RESEND_API_KEY=${RESEND_API_KEY:-}
      - OLLAMA_URL=http://ollama:11434
      # Enable communication with deep research service
      - DEEP_RESEARCH_URL=http://deep-research:3001
    depends_on:
      db:
        condition: service_healthy
      migrations:
        condition: service_completed_successfully
    healthcheck:
      test: ['CMD', 'wget', '--spider', '--quiet', 'http://127.0.0.1:3000']
      interval: 90s
      timeout: 5s
      retries: 3
      start_period: 10s
    networks:
      - tel-network

  # Piren Deep Research Service
  deep-research:
    build:
      context: ./piren-deep-research
      dockerfile: Dockerfile
    container_name: tel-deep-research
    restart: unless-stopped
    ports:
      - '3001:3000'
    environment:
      # AI Providers
      - GOOGLE_GENERATIVE_AI_API_KEY=${GOOGLE_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY:-}
      - XAI_API_KEY=${XAI_API_KEY:-}
      - MISTRAL_API_KEY=${MISTRAL_API_KEY:-}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY:-}
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY:-}
      - OLLAMA_URL=http://ollama:11434
      # Search Providers
      - TAVILY_API_KEY=${TAVILY_API_KEY:-}
      - FIRECRAWL_API_KEY=${FIRECRAWL_API_KEY:-}
      - EXA_API_KEY=${EXA_API_KEY:-}
      - SEARXNG_API_URL=${SEARXNG_API_URL:-}
      - BOCHA_API_KEY=${BOCHA_API_KEY:-}
      # App Configuration
      - NEXT_PUBLIC_BUILD_MODE=standalone
      - NODE_ENV=production
    env_file:
      - ./piren-deep-research/.env.local
    healthcheck:
      test: ['CMD', 'wget', '--spider', '--quiet', 'http://127.0.0.1:3000']
      interval: 90s
      timeout: 5s
      retries: 3
      start_period: 15s
    networks:
      - tel-network

  # Database migrations for main app
  migrations:
    build:
      context: .
      dockerfile: docker/db.Dockerfile
    container_name: tel-migrations
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-simstudio}
    depends_on:
      db:
        condition: service_healthy
    command: ['bun', 'run', 'db:migrate']
    restart: 'no'
    networks:
      - tel-network

  # PostgreSQL Database with pgvector
  db:
    image: pgvector/pgvector:pg17
    container_name: tel-postgres
    restart: unless-stopped
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-simstudio}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - tel-network

  # Ollama for local LLM support (optional)
  ollama:
    image: ollama/ollama:latest
    container_name: tel-ollama
    restart: unless-stopped
    ports:
      - '11434:11434'
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_ORIGINS=*
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    networks:
      - tel-network

  # Nginx reverse proxy (optional for production)
  nginx:
    image: nginx:alpine
    container_name: tel-nginx
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - simstudio
      - deep-research
    networks:
      - tel-network

volumes:
  postgres_data:
    driver: local
  ollama_data:
    driver: local

networks:
  tel-network:
    driver: bridge